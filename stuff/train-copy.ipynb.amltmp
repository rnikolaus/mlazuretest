{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import azureml.core\r\n",
        "\r\n",
        "print(\"Azure Machine Learning SDK Version:\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Azure Machine Learning SDK Version: 1.37.0\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1645894038075
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Workspace\r\n",
        "\r\n",
        "ws = Workspace.from_config()\r\n",
        "print(ws.name, ws.location, ws.resource_group, sep = ' | ')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "ml-workspace | eastus | ml-rg\n"
        }
      ],
      "execution_count": 2,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1645894038291
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import AmlCompute, ComputeTarget\r\n",
        "import os\r\n",
        "\r\n",
        "# Choose a name and maximum size for your cluster\r\n",
        "compute_name = \"cpu-cluster-d2\"\r\n",
        "compute_min_nodes = 0\r\n",
        "compute_max_nodes = 4\r\n",
        "vm_size = \"STANDARD_D2_V2\"\r\n",
        "\r\n",
        "if compute_name in ws.compute_targets:\r\n",
        "    print(\"Found an existing compute target of name: \" + compute_name)\r\n",
        "    compute_target = ws.compute_targets[compute_name]\r\n",
        "    # Note: you may want to make sure compute_target is of type AmlCompute        \r\n",
        "else:\r\n",
        "    print(\"Creating new compute target...\")\r\n",
        "    provisioning_config = AmlCompute.provisioning_configuration(\r\n",
        "        vm_size=vm_size,\r\n",
        "        min_nodes=compute_min_nodes, \r\n",
        "        max_nodes=compute_max_nodes)\r\n",
        "        \r\n",
        "    # Create the cluster\r\n",
        "    compute_target = ComputeTarget.create(ws, compute_name, provisioning_config)\r\n",
        "    compute_target.wait_for_completion(show_output=True, min_node_count=None, timeout_in_minutes=20)\r\n",
        "\r\n",
        "print(compute_target.get_status().serialize())"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Found an existing compute target of name: cpu-cluster-d2\n{'currentNodeCount': 0, 'targetNodeCount': 0, 'nodeStateCounts': {'preparingNodeCount': 0, 'runningNodeCount': 0, 'idleNodeCount': 0, 'unusableNodeCount': 0, 'leavingNodeCount': 0, 'preemptedNodeCount': 0}, 'allocationState': 'Steady', 'allocationStateTransitionTime': '2022-02-26T16:09:22.618000+00:00', 'errors': None, 'creationTime': '2022-01-15T14:45:39.283011+00:00', 'modifiedTime': '2022-01-15T14:45:42.951037+00:00', 'provisioningState': 'Succeeded', 'provisioningStateTransitionTime': None, 'scaleSettings': {'minNodeCount': 0, 'maxNodeCount': 4, 'nodeIdleTimeBeforeScaleDown': 'PT1800S'}, 'vmPriority': 'Dedicated', 'vmSize': 'STANDARD_D2_V2'}\n"
        }
      ],
      "execution_count": 3,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1645894038573
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.experiment import Experiment\r\n",
        "\r\n",
        "from files import BCTrade_utils\r\n",
        "#env ='Btc_with_indicators'\r\n",
        "env ='Bitstamp_1'\r\n",
        "experiment_name = BCTrade_utils.registerBCTrade(env)\r\n",
        "exp = Experiment(workspace=ws, name=experiment_name)"
      ],
      "outputs": [],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1645894046265
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from \tazureml.data.data_reference import DataReference\r\n",
        "from azureml.core import Dataset\r\n",
        "\r\n",
        "datastore = ws.get_default_datastore()\r\n",
        "\r\n",
        "path='checkpoints_'\r\n",
        "path+='BCTrade-Bitstamp_1_1645880455_99d03907_head'\r\n",
        "checkpoint_ds= Dataset.File.from_files(DataReference(datastore, path_on_datastore=path))\r\n",
        "\r\n",
        "checkpoint = '-815'\r\n"
      ],
      "outputs": [],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1645894052887
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.contrib.train.rl import ReinforcementLearningEstimator, Ray\r\n",
        "from azureml.core.environment import Environment\r\n",
        "\r\n",
        "training_algorithm = \"PPO\"\r\n",
        "rl_environment = env\r\n",
        "video_capture = False\r\n",
        "\r\n",
        "algorithm_config = '\\'{\"num_gpus\": 0, \"num_workers\": 1}\\''\r\n",
        "#if video_capture:\r\n",
        "#    algorithm_config = '\\'{\"num_gpus\": 0, \"num_workers\": 1, \"monitor\": true}\\''\r\n",
        "#else:\r\n",
        "#    algorithm_config = '\\'{\"num_gpus\": 0, \"num_workers\": 1, \"monitor\": false}\\''\r\n",
        "script_params = {\r\n",
        "\r\n",
        "    # Training algorithm\r\n",
        "    \"--run\": training_algorithm,\r\n",
        "    \r\n",
        "    # Training environment\r\n",
        "    #\"--env\": '\\'{\"name\": \"'+rl_environment+'\", \"singlerun\": True, \"spreadfactor\":0.0}\\'',\r\n",
        "    \"--env\": '\\'{\"name\": \"'+rl_environment+'\", \"checkpoint\":\"'+checkpoint+'\", \"singlerun\":True, \"spreadfactor\":0.05}\\'',\r\n",
        "\r\n",
        "    #\"--spreadfactor\": 0.1,\r\n",
        "    \r\n",
        "    # Algorithm-specific parameters\r\n",
        "    \"--config\": algorithm_config,\r\n",
        "    \r\n",
        "    # Stop conditions\r\n",
        "    #\"--stop\": '\\'{\"time_total_s\": 15000,\"episode_reward_mean\":5}\\'',\r\n",
        "    \"--stop\": '\\'{\"time_total_s\": 36000,\"episode_reward_mean\":2}\\'',\r\n",
        "    #\"--stop\": '\\'{\"time_total_s\": 36000,\"episode_reward_mean\":2}\\'',\r\n",
        "    #\"--stop\": '\\'{\"time_total_s\": 60000}\\'',\r\n",
        "    \r\n",
        "    # Frequency of taking checkpoints\r\n",
        "    \"--checkpoint-freq\": 1,\r\n",
        "    \r\n",
        "    # If a checkpoint should be taken at the end - optional argument with no value\r\n",
        "    \"--checkpoint-at-end\": \"\",\r\n",
        "    \r\n",
        "    # Log directory\r\n",
        "    \"--local-dir\": './logs'\r\n",
        "}\r\n",
        "\r\n",
        "xvfb_env = None\r\n",
        "#if video_capture:\r\n",
        "    # Ray's video capture support requires to run everything under a headless display driver called (xvfb).\r\n",
        "    # There are two parts to this:\r\n",
        "    # 1. Use a custom docker file with proper instructions to install xvfb, ffmpeg, python-opengl\r\n",
        "    # and other dependencies.\r\n",
        "   \r\n",
        "#    with open(\"files/docker/Dockerfile\", \"r\") as f:\r\n",
        "#        dockerfile=f.read()\r\n",
        "\r\n",
        "#    xvfb_env = Environment(name='xvfb-vdisplay')\r\n",
        "#    xvfb_env.docker.base_image = None\r\n",
        "#    xvfb_env.docker.base_dockerfile = dockerfile\r\n",
        "    \r\n",
        "    # 2.  Execute the Python process via the xvfb-run command to set up the headless display driver.\r\n",
        "#    xvfb_env.python.user_managed_dependencies = True\r\n",
        "#    xvfb_env.python.interpreter_path = \"xvfb-run -s '-screen 0 640x480x16 -ac +extension GLX +render' python\"\r\n",
        "\r\n",
        "\r\n",
        "training_estimator = ReinforcementLearningEstimator(\r\n",
        "\r\n",
        "    # Location of source files\r\n",
        "    source_directory='files',\r\n",
        "    \r\n",
        "    # Python script file\r\n",
        "    entry_script='BCTrade_training.py',\r\n",
        "    \r\n",
        "    # A dictionary of arguments to pass to the training script specified in ``entry_script``\r\n",
        "    script_params=script_params,\r\n",
        "    \r\n",
        "    # The Azure Machine Learning compute target set up for Ray head nodes\r\n",
        "    compute_target=compute_target,\r\n",
        "    \r\n",
        "    \r\n",
        "    inputs=[\r\n",
        "        checkpoint_ds.as_named_input('artifacts_dataset'),\r\n",
        "        checkpoint_ds.as_named_input('artifacts_path').as_mount()],\r\n",
        "    \r\n",
        "    # Reinforcement learning framework. Currently must be Ray.\r\n",
        "    rl_framework=Ray(),\r\n",
        "    \r\n",
        "    # Custom environmnet for Xvfb\r\n",
        "    environment=xvfb_env\r\n",
        ")"
      ],
      "outputs": [],
      "execution_count": 6,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1645894053132
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "training_run = exp.submit(training_estimator)"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1645894070151
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.widgets import RunDetails\r\n",
        "\r\n",
        "RunDetails(training_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_RLWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', 'sdk_v…",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a6d006794b4a4601a751e065fdf78ba3"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/BCTrade-Bitstamp_1_1645894054_1baad5fd?wsid=/subscriptions/736ac584-c533-43a9-8a83-d19bf290ffb8/resourcegroups/ml-rg/workspaces/ml-workspace&tid=3ffbf2df-6ac2-41dc-95c5-2f64a8024caf\", \"run_id\": \"BCTrade-Bitstamp_1_1645894054_1baad5fd\", \"run_properties\": {\"run_id\": \"BCTrade-Bitstamp_1_1645894054_1baad5fd\", \"created_utc\": \"2022-02-26T16:47:48.07764Z\", \"properties\": {}, \"tags\": {}, \"end_time_utc\": \"2022-02-26T17:50:25.855451Z\", \"status\": \"Completed\", \"log_files\": {\"azureml-logs/reinforcementlearning.txt\": \"https://rnikolaus.blob.core.windows.net/azureml/ExperimentRun/dcid.BCTrade-Bitstamp_1_1645894054_1baad5fd/azureml-logs/reinforcementlearning.txt?sv=2019-07-07&sr=b&sig=nF3uwkXzJcDGJLsnU2eUj9sJVCI7WpZOzJ8EKuUgCBA%3D&skoid=e2479b93-fc73-41fb-89ce-5cfc3e486410&sktid=3ffbf2df-6ac2-41dc-95c5-2f64a8024caf&skt=2022-02-26T11%3A32%3A10Z&ske=2022-02-27T19%3A42%3A10Z&sks=b&skv=2019-07-07&st=2022-02-26T17%3A42%3A33Z&se=2022-02-27T01%3A52%3A33Z&sp=r\"}, \"log_groups\": [[\"azureml-logs/reinforcementlearning.txt\"]], \"run_duration\": \"1:02:37\", \"run_number\": \"1645894068\", \"run_queued_details\": {\"status\": \"Completed\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"BCTrade-Bitstamp_1_1645894054_1baad5fd_head\", \"run_number\": 1645894074, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": null, \"start_time\": \"2022-02-26T16:51:02.848131Z\", \"end_time\": \"2022-02-26T17:50:09.106558Z\", \"created_time\": \"2022-02-26T16:47:54.743854Z\", \"created_time_dt\": \"2022-02-26T16:47:54.743854Z\", \"duration\": \"1:02:14\"}], \"children_metrics\": {\"categories\": null, \"series\": null, \"metricName\": null}, \"run_metrics\": [], \"run_logs\": \"[2022-02-26T16:47:48.3252130Z][Info]Starting reinforcement learning run with id BCTrade-Bitstamp_1_1645894054_1baad5fd.\\n[2022-02-26T16:47:54.0459456Z][Info]Starting head node child run with id BCTrade-Bitstamp_1_1645894054_1baad5fd_head.\\n[2022-02-26T17:50:28.4931752Z][Info]Some child runs have reached terminal state. All active child runs will be cancelled. The run Ids that reached terminal state are: BCTrade-Bitstamp_1_1645894054_1baad5fd_head.\\n\\nRun is completed.\", \"graph\": {}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.37.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 8,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1645894070566
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3-azureml",
      "language": "python",
      "display_name": "Python 3.6 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python3-azureml"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}